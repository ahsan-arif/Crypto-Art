'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _lodash = require('lodash.assign');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Modal = function (_Component) {
  _inherits(Modal, _Component);

  function Modal(props) {
    _classCallCheck(this, Modal);

    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));
  }

  _createClass(Modal, [{
    key: 'getInititalState',
    value: function getInititalState() {
      return {};
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.modalWrap = $('<div class="semantic-modal-wrap"></div>').appendTo('body').get(0);
      this.handle();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.modal) {
        $(this.modal).modal('hide');
        this.modal = null;
      }

      $(this.modalWrap).remove();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.handle();
    }
  }, {
    key: 'handle',
    value: function handle() {
      var _this2 = this;

      if (this.props.isOpen) {
        this.modal = _reactDom2.default.render(this.props.children, this.modalWrap);

        $(this.modal).modal((0, _lodash2.default)({}, this.props, {
          onHidden: function onHidden() {
            if (typeof _this2.props.onHidden === 'function') {
              _this2.props.onHidden();
            }

            $(_this2.modal).remove();
            _this2.modal = null;
          }
        })).modal('show');
      } else if (this.modal) {
        $(this.modal).modal('hide');
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { style: { "display": "none" } });
    }
  }]);

  return Modal;
}(_react.Component);

exports.default = Modal;